# auth_router.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from passlib.context import CryptContext
from jose import jwt, JWTError
from fastapi.security import OAuth2PasswordBearer
from datetime import datetime, timedelta
from typing import Optional

from ..database import get_db
from ..models import User, UserRole, UserStatus
from ..schemas import UserCreate, UserLogin, LoginResponse, UserOut, ChangePasswordRequest

# T·∫°o router
router = APIRouter(prefix="/auth", tags=["Auth"])

# C·∫•u h√¨nh m√£ h√≥a m·∫≠t kh·∫©u
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# JWT config
SECRET_KEY = "your-secret-key"   # üëâ sau n√†y n√™n ƒë·ªÉ trong bi·∫øn m√¥i tr∆∞·ªùng
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

# OAuth2 schema
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")

# Helper
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)


# L·∫•y user hi·ªán t·∫°i t·ª´ token
def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id: int = payload.get("sub")
        if user_id is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception

    user = db.query(User).filter(User.id == user_id).first()
    if user is None:
        raise credentials_exception
    return user

# API: ƒêƒÉng k√Ω
@router.post("/register", response_model=LoginResponse)
def register(user_in: UserCreate, db: Session = Depends(get_db)):
    if db.query(User).filter(User.username == user_in.username).first():
        raise HTTPException(status_code=400, detail="Username already registered")
    if db.query(User).filter(User.email == user_in.email).first():
        raise HTTPException(status_code=400, detail="Email already registered")

    hashed_password = get_password_hash(user_in.password)
    new_user = User(
        username=user_in.username,
        email=user_in.email,
        password_hash=hashed_password,
        full_name=user_in.full_name,
        role=UserRole.customer,
        status=UserStatus.active,
    )
    db.add(new_user)
    db.commit()
    db.refresh(new_user)

    # T·∫°o JWT token
    access_token = create_access_token(data={"sub": str(new_user.id)})

    return LoginResponse(
        access_token=access_token,
        token_type="bearer",
        user=UserOut.model_validate(new_user)
    )

# API: ƒêƒÉng nh·∫≠p
@router.post("/login", response_model=LoginResponse)
def login(user_in: UserLogin, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.username == user_in.username).first()
    if not user or not verify_password(user_in.password, user.password_hash):
        raise HTTPException(status_code=401, detail="Invalid username or password")

    if user.status != UserStatus.active:
        raise HTTPException(status_code=403, detail="User is inactive")

    access_token = create_access_token(data={"sub": str(user.id)})

    return LoginResponse(
        access_token=access_token,
        token_type="bearer",
        user=UserOut.model_validate(user)
    )

# API: ƒêƒÉng xu·∫•t (client ch·ªâ c·∫ßn xo√° token)
@router.post("/logout")
def logout():
    return {"message": "Logout successful. Please remove token on client."}


@router.put("/change-password")
def change_password(
    req: ChangePasswordRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    API: ƒê·ªïi m·∫≠t kh·∫©u cho user ƒëang ƒëƒÉng nh·∫≠p
    """
    user = db.query(User).filter(User.id == current_user.id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    # Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
    if not pwd_context.verify(req.old_password, user.password_hash):
        raise HTTPException(status_code=400, detail="Old password is incorrect")

    # Hash m·∫≠t kh·∫©u m·ªõi
    user.password_hash = pwd_context.hash(req.new_password)

    db.commit()
    db.refresh(user)

    return {"message": "Password changed successfully"}

# Test API
@router.get("/test")
def test():
    return {"message": "Auth router is working!"}
