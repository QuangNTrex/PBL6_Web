from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from sqlalchemy import func, extract
from datetime import datetime
from typing import List, Dict, Any

from app import models, schemas
from app.database import get_db

router = APIRouter(prefix="/statistics", tags=["Statistics"])

# ðŸŸ¢ 1. Thá»‘ng kÃª tá»•ng quan
@router.get("/overview")
def get_overview(db: Session = Depends(get_db)):
    total_products = db.query(func.count(models.Product.id)).scalar()
    total_orders = db.query(func.count(models.Order.id)).scalar()
    total_revenue = db.query(func.coalesce(func.sum(models.Order.total_amount), 0)).scalar()
    total_customers = db.query(func.count(models.User.id)).filter(models.User.role == "customer").scalar()

    return {
        "total_products": total_products,
        "total_orders": total_orders,
        "total_revenue": total_revenue,
        "total_customers": total_customers
    }


# ðŸŸ¢ 2. Doanh thu theo thÃ¡ng trong nÄƒm (tham sá»‘: year)
@router.get("/revenue-by-month")
def revenue_by_month(year: int, db: Session = Depends(get_db)):
    month_expr = extract("month", models.Order.created_at)

    revenues = (
        db.query(
            month_expr.label("month"),
            func.coalesce(func.sum(models.Order.total_amount), 0).label("revenue")
        )
        .filter(extract("year", models.Order.created_at) == year)
        .group_by(month_expr)          # âœ… dÃ¹ng láº¡i biá»ƒu thá»©c
        .order_by(month_expr)          # âœ… dÃ¹ng láº¡i biá»ƒu thá»©c
        .all()
    )

    return [{"month": int(month), "revenue": float(revenue)} for month, revenue in revenues]


# ðŸŸ¢ 3. Tá»‰ lá»‡ Ä‘Æ¡n hÃ ng theo tráº¡ng thÃ¡i (Pie chart) trong thÃ¡ng hiá»‡n táº¡i
@router.get("/order-status-ratio")
def order_status_ratio(db: Session = Depends(get_db)):
    now = datetime.now()
    results = (
        db.query(models.Order.status, func.count(models.Order.id).label("count"))
        .filter(
            extract("year", models.Order.created_at) == now.year,
            extract("month", models.Order.created_at) == now.month
        )
        .group_by(models.Order.status)
        .all()
    )

    total = sum(count for _, count in results) or 1  # trÃ¡nh chia cho 0
    return [
        {"status": status, "count": count, "ratio": round(count / total * 100, 2)}
        for status, count in results
    ]


# ðŸŸ¢ 4. 5 Ä‘Æ¡n hÃ ng gáº§n nháº¥t
@router.get("/latest-orders", response_model=List[schemas.Order])
def get_latest_orders(db: Session = Depends(get_db)):
    orders = (
        db.query(models.Order)
        .order_by(models.Order.created_at.desc())
        .limit(5)
        .all()
    )
    return orders


# ðŸŸ¢ 5. 5 khÃ¡ch hÃ ng má»›i Ä‘Äƒng kÃ½
@router.get("/latest-customers", response_model=List[schemas.UserOut])
def get_latest_customers(db: Session = Depends(get_db)):
    users = (
        db.query(models.User)
        .filter(models.User.role == "customer")
        .order_by(models.User.created_at.desc())
        .limit(5)
        .all()
    )
    return users
